 CREATE TABLE reaction (
    ->     id INT AUTO_INCREMENT PRIMARY KEY,
    ->     user_name VARCHAR(100),
    ->     reaction_type VARCHAR(20),
    ->     post_id INT,
    ->     created_at DATETIME,
    ->     location VARCHAR(100),
    ->     mood_level INT,
    ->     comment TEXT
    -> ); 

INSERT INTO reaction (user_name, reaction_type, post_id, created_at, location, mood_level, comment) VALUES
    -> ('Alice', 'like', 101, '2025-08-07 10:15:00', 'New York', 8, 'Nice post!'),
    -> ('Bob', 'love', 102, '2025-08-06 14:20:00', 'Los Angeles', 9, 'Awesome!'),
    -> ('Charlie', 'angry', 101, '2025-08-05 09:10:00', 'Chicago', 3, NULL),
    -> ('Diana', 'wow', 103, '2025-08-07 08:30:00', 'Miami', 7, 'Interesting point.'),
    -> ('Ethan', 'sad', 104, '2025-08-04 16:45:00', 'Dallas', 2, NULL),
    -> ('Fiona', 'love', 102, '2025-08-07 12:00:00', 'Boston', 6, 'Well said.'),
    -> ('George', 'like', 105, '2025-08-03 11:25:00', 'Seattle', 5, NULL),
    -> ('Hannah', 'like', 106, '2025-08-07 15:50:00', 'Denver', 9, 'Completely agree!'),
    -> ('Ian', 'angry', 107, '2025-08-06 13:15:00', 'Phoenix', 4, 'Not okay with this.'),
    -> ('Jane', 'sad', 108, '2025-08-02 18:40:00', 'Atlanta', 1, NULL),
    -> ('Sam', 'like', 101, '2025-08-07 10:50:00', 'New York', 8, NULL),
    -> ('Anita', 'wow', 109, '2025-08-01 20:10:00', 'Houston', 7, NULL),
    -> ('Brian', 'love', 110, '2025-08-07 09:05:00', 'San Francisco', 10, 'Fantastic work!'),
    -> ('Catherine', 'like', 111, '2025-08-07 08:55:00', 'New York', 6, NULL),
    -> ('Daniel', 'angry', 112, '2025-08-05 17:35:00', 'Chicago', 2, NULL);

LIKE
Write a query to find all reactions made by users whose names start with the letter 'A'.

select user_name,reaction_type from reaction where user_name like 'A%';

+-----------+---------------+
| user_name | reaction_type |
+-----------+---------------+
| Alice     | like          |
| Anita     | wow           |
+-----------+---------------+

AS (Alias)
Write a query to display user_name as Reactor and reaction_type as Type.

SELECT user_name as Reactor,reaction_type as Type from reaction;
+-----------+-------+
| Reactor   | Type  |
+-----------+-------+
| Alice     | like  |
| Bob       | love  |
| Charlie   | angry |
| Diana     | wow   |
| Ethan     | sad   |
| Fiona     | love  |
| George    | like  |
| Hannah    | like  |
| Ian       | angry |
| Jane      | sad   |
| Sam       | like  |
| Anita     | wow   |
| Brian     | love  |
| Catherine | like  |
| Daniel    | angry |
+-----------+-------+

BETWEEN
Write a query to find all reactions where the mood level is between 4 and 8. 

 SELECT reaction_type,mood_level from reaction where mood_level between 4 and 8;
+---------------+------------+
| reaction_type | mood_level |
+---------------+------------+
| like          |          8 |
| wow           |          7 |
| love          |          6 |
| like          |          5 |
| angry         |          4 |
| like          |          8 |
| wow           |          7 |
| like          |          6 |
+---------------+------------+

AND
Write a query to get all reactions where the type is 'like' and the mood level is above 7.

select reaction_type,mood_level from reaction where reaction_type='like' and mood_level>7;
+---------------+------------+
| reaction_type | mood_level |
+---------------+------------+
| like          |          8 |
| like          |          9 |
| like          |          8 |
+---------------+------------+

OR
Write a query to list all reactions where the type is either 'love' or 'angry'.

select reaction_type from reaction where reaction_type='like' or 'angry';
+---------------+
| reaction_type |
+---------------+
| like          |
| like          |
| like          |
| like          |
| like          |
+---------------+

NOT
Write a query to show all reactions that are not of type 'sad'. 

 select reaction_type from reaction where NOT reaction_type='sad';
+---------------+
| reaction_type |
+---------------+
| like          |
| love          |
| angry         |
| wow           |
| love          |
| like          |
| like          |
| angry         |
| like          |
| wow           |
| love          |
| like          |
| angry         |
+---------------+

IN
Write a query to find all reactions where the reaction type is 'like', 'wow', or 'love'.

 select reaction_type from reaction where reaction_type IN ('like','wow','love');
+---------------+
| reaction_type |
+---------------+
| like          |
| love          |
| wow           |
| love          |
| like          |
| like          |
| like          |
| wow           |
| love          |
| like          |
+---------------+

IS NULL
Write a query to display all reactions where the comment is missing (i.e., NULL).

select * from reaction where comment is null;
+----+-----------+---------------+---------+---------------------+----------+------------+---------+
| id | user_name | reaction_type | post_id | created_at          | location | mood_level | comment |
+----+-----------+---------------+---------+---------------------+----------+------------+---------+
|  3 | Charlie   | angry         |     101 | 2025-08-05 09:10:00 | Chicago  |          3 | NULL    |
|  5 | Ethan     | sad           |     104 | 2025-08-04 16:45:00 | Dallas   |          2 | NULL    |
|  7 | George    | like          |     105 | 2025-08-03 11:25:00 | Seattle  |          5 | NULL    |
| 10 | Jane      | sad           |     108 | 2025-08-02 18:40:00 | Atlanta  |          1 | NULL    |
| 12 | Anita     | wow           |     109 | 2025-08-01 20:10:00 | Houston  |          7 | NULL    |
| 14 | Catherine | like          |     111 | 2025-08-07 08:55:00 | New York |          6 | NULL    |
| 15 | Daniel    | angry         |     112 | 2025-08-05 17:35:00 | Chicago  |          2 | NULL    |
+----+-----------+---------------+---------+---------------------+----------+------------+---------+

IS NOT NULL
Write a query to find all reactions that include a comment.

select * from reaction where comment is not null;
+----+-----------+---------------+---------+---------------------+---------------+------------+---------------------+
| id | user_name | reaction_type | post_id | created_at          | location      | mood_level | comment             |
+----+-----------+---------------+---------+---------------------+---------------+------------+---------------------+
|  1 | Alice     | like          |     101 | 2025-08-07 10:15:00 | New York      |          8 | Nice post!          |
|  2 | Bob       | love          |     102 | 2025-08-06 14:20:00 | Los Angeles   |          9 | Awesome!            |
|  4 | Diana     | wow           |     103 | 2025-08-07 08:30:00 | Miami         |          7 | Interesting point.  |
|  6 | Fiona     | love          |     102 | 2025-08-07 12:00:00 | Boston        |          6 | Well said.          |
|  8 | Hannah    | like          |     106 | 2025-08-07 15:50:00 | Denver        |          9 | Completely agree!   |
|  9 | Ian       | angry         |     107 | 2025-08-06 13:15:00 | Phoenix       |          4 | Not okay with this. |
| 11 | Sam       | like          |     101 | 2025-08-07 10:50:00 | New York      |          8 | ???                 |
| 13 | Brian     | love          |     110 | 2025-08-07 09:05:00 | San Francisco |         10 | Fantastic work!     |
+----+-----------+---------------+---------+---------------------+---------------+------------+---------------------+

UPPER()
Write a query to show all usernames in uppercase.

 select upper(user_name) from reaction;
+------------------+
| upper(user_name) |
+------------------+
| ALICE            |
| BOB              |
| CHARLIE          |
| DIANA            |
| ETHAN            |
| FIONA            |
| GEORGE           |
| HANNAH           |
| IAN              |
| JANE             |
| SAM              |
| ANITA            |
| BRIAN            |
| CATHERINE        |
| DANIEL           |
+------------------+

LOWER()
Show all reaction types in lowercase.

mysql> SELECT LOWER(reaction_type) AS lower_reaction_type FROM reaction;
+---------------------+
| lower_reaction_type |
+---------------------+
| like                |
| love                |
| angry               |
| wow                 |
| sad                 |
| love                |
| like                |
| like                |
| angry               |
| sad                 |
| like                |
| wow                 |
| love                |
| like                |
| angry               |
+---------------------+

LENGTH()
Find all users whose usernames are longer than 6 characters.

mysql> SELECT * FROM reaction WHERE LENGTH(user_name) > 6;
+----+-----------+---------------+---------+---------------------+----------+------------+---------+
| id | user_name | reaction_type | post_id | created_at          | location | mood_level | comment |
+----+-----------+---------------+---------+---------------------+----------+------------+---------+
|  3 | Charlie   | angry         |     101 | 2025-08-05 09:10:00 | Chicago  |          3 | NULL    |
| 14 | Catherine | like          |     111 | 2025-08-07 08:55:00 | New York |          6 | NULL    |
+----+-----------+---------------+---------+---------------------+----------+------------+---------+

NOW()
Find all reactions that were made today (based on the created_at column).

mysql> SELECT * FROM reaction WHERE DATE(created_at) = CURDATE();
+----+-----------+---------------+---------+---------------------+---------------+------------+--------------------+
| id | user_name | reaction_type | post_id | created_at          | location      | mood_level | comment            |
+----+-----------+---------------+---------+---------------------+---------------+------------+--------------------+
|  1 | Alice     | like          |     101 | 2025-08-07 10:15:00 | New York      |          8 | Nice post!         |
|  4 | Diana     | wow           |     103 | 2025-08-07 08:30:00 | Miami         |          7 | Interesting point. |
|  6 | Fiona     | love          |     102 | 2025-08-07 12:00:00 | Boston        |          6 | Well said.         |
|  8 | Hannah    | like          |     106 | 2025-08-07 15:50:00 | Denver        |          9 | Completely agree!  |
| 11 | Sam       | like          |     101 | 2025-08-07 10:50:00 | New York      |          8 | NULL               |
| 13 | Brian     | love          |     110 | 2025-08-07 09:05:00 | San Francisco |         10 | Fantastic work!    |
| 14 | Catherine | like          |     111 | 2025-08-07 08:55:00 | New York      |          6 | NULL               |
+----+-----------+---------------+---------+---------------------+---------------+------------+--------------------+

DATE()
Extract and show only the date part from the created_at column.

mysql> SELECT user_name, DATE(created_at) AS reaction_date FROM reaction;
+-----------+---------------+
| user_name | reaction_date |
+-----------+---------------+
| Alice     | 2025-08-07    |
| Bob       | 2025-08-06    |
| Charlie   | 2025-08-05    |
| Diana     | 2025-08-07    |
| Ethan     | 2025-08-04    |
| Fiona     | 2025-08-07    |
| George    | 2025-08-03    |
| Hannah    | 2025-08-07    |
| Ian       | 2025-08-06    |
| Jane      | 2025-08-02    |
| Sam       | 2025-08-07    |
| Anita     | 2025-08-01    |
| Brian     | 2025-08-07    |
| Catherine | 2025-08-07    |
| Daniel    | 2025-08-05    |
+-----------+---------------+

LIKE with %
Find all users whose names contain the substring 'an'.

mysql> SELECT * FROM reaction WHERE user_name LIKE '%an%';
+----+-----------+---------------+---------+---------------------+---------------+------------+---------------------+
| id | user_name | reaction_type | post_id | created_at          | location      | mood_level | comment             |
+----+-----------+---------------+---------+---------------------+---------------+------------+---------------------+
|  4 | Diana     | wow           |     103 | 2025-08-07 08:30:00 | Miami         |          7 | Interesting point.  |
|  5 | Ethan     | sad           |     104 | 2025-08-04 16:45:00 | Dallas        |          2 | NULL                |
|  8 | Hannah    | like          |     106 | 2025-08-07 15:50:00 | Denver        |          9 | Completely agree!   |
|  9 | Ian       | angry         |     107 | 2025-08-06 13:15:00 | Phoenix       |          4 | Not okay with this. |
| 10 | Jane      | sad           |     108 | 2025-08-02 18:40:00 | Atlanta       |          1 | NULL                |
| 12 | Anita     | wow           |     109 | 2025-08-01 20:10:00 | Houston       |          7 | NULL                |
| 13 | Brian     | love          |     110 | 2025-08-07 09:05:00 | San Francisco |         10 | Fantastic work!     |
| 15 | Daniel    | angry         |     112 | 2025-08-05 17:35:00 | Chicago       |          2 | NULL                |
+----+-----------+---------------+---------+---------------------+---------------+------------+---------------------+

ROUND()
Display each user’s mood level rounded to the nearest 5.

mysql> SELECT user_name, mood_level, ROUND(mood_level, -1) AS rounded_mood FROM reaction;
+-----------+------------+--------------+
| user_name | mood_level | rounded_mood |
+-----------+------------+--------------+
| Alice     |          8 |           10 |
| Bob       |          9 |           10 |
| Charlie   |          3 |            0 |
| Diana     |          7 |           10 |
| Ethan     |          2 |            0 |
| Fiona     |          6 |           10 |
| George    |          5 |           10 |
| Hannah    |          9 |           10 |
| Ian       |          4 |            0 |
| Jane      |          1 |            0 |
| Sam       |          8 |           10 |
| Anita     |          7 |           10 |
| Brian     |         10 |           10 |
| Catherine |          6 |           10 |
| Daniel    |          2 |            0 |
+-----------+------------+--------------+

SUBSTR + UPPER()
Show the first 2 letters of each user's name in uppercase.

mysql> SELECT UPPER(SUBSTRING(user_name, 1, 2)) AS name_prefix FROM reaction;
+-------------+
| name_prefix |
+-------------+
| AL          |
| BO          |
| CH          |
| DI          |
| ET          |
| FI          |
| GE          |
| HA          |
| IA          |
| JA          |
| SA          |
| AN          |
| BR          |
| CA          |
| DA          |
+-------------+

NOT IN (with values)
Find all reactions not made on posts with IDs 10, 20, or 30.

mysql> SELECT * FROM reaction WHERE post_id NOT IN (10, 20, 30);
+----+-----------+---------------+---------+---------------------+---------------+------------+---------------------+
| id | user_name | reaction_type | post_id | created_at          | location      | mood_level | comment             |
+----+-----------+---------------+---------+---------------------+---------------+------------+---------------------+
|  1 | Alice     | like          |     101 | 2025-08-07 10:15:00 | New York      |          8 | Nice post!          |
|  2 | Bob       | love          |     102 | 2025-08-06 14:20:00 | Los Angeles   |          9 | Awesome!            |
|  3 | Charlie   | angry         |     101 | 2025-08-05 09:10:00 | Chicago       |          3 | NULL                |
|  4 | Diana     | wow           |     103 | 2025-08-07 08:30:00 | Miami         |          7 | Interesting point.  |
|  5 | Ethan     | sad           |     104 | 2025-08-04 16:45:00 | Dallas        |          2 | NULL                |
|  6 | Fiona     | love          |     102 | 2025-08-07 12:00:00 | Boston        |          6 | Well said.          |
|  7 | George    | like          |     105 | 2025-08-03 11:25:00 | Seattle       |          5 | NULL                |
|  8 | Hannah    | like          |     106 | 2025-08-07 15:50:00 | Denver        |          9 | Completely agree!   |
|  9 | Ian       | angry         |     107 | 2025-08-06 13:15:00 | Phoenix       |          4 | Not okay with this. |
| 10 | Jane      | sad           |     108 | 2025-08-02 18:40:00 | Atlanta       |          1 | NULL                |
| 11 | Sam       | like          |     101 | 2025-08-07 10:50:00 | New York      |          8 | NULL                |
| 12 | Anita     | wow           |     109 | 2025-08-01 20:10:00 | Houston       |          7 | NULL                |
| 13 | Brian     | love          |     110 | 2025-08-07 09:05:00 | San Francisco |         10 | Fantastic work!     |
| 14 | Catherine | like          |     111 | 2025-08-07 08:55:00 | New York      |          6 | NULL                |
| 15 | Daniel    | angry         |     112 | 2025-08-05 17:35:00 | Chicago       |          2 | NULL                |
+----+-----------+---------------+---------+---------------------+---------------+------------+---------------------+

COUNT and IS NULL
Count how many reactions have no comment (comment IS NULL).

mysql> SELECT COUNT(*) AS null_comment_count FROM reaction WHERE comment IS NULL;
+--------------------+
| null_comment_count |
+--------------------+
|                  7 |
+--------------------+



Create the order table 
CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_name VARCHAR(100),
    product_name VARCHAR(100),
    order_date DATETIME,
    quantity INT,
    price DECIMAL(10,2),
    status VARCHAR(20),
    shipping_address TEXT
);

Insert the data
INSERT INTO orders (customer_name, product_name, order_date, quantity, price, status, shipping_address) VALUES
('Alice', 'Laptop', '2025-08-07 09:00:00', 1, 1200.00, 'shipped', '123 Main St, New York'),
('Bob', 'Phone', '2025-08-06 14:10:00', 2, 650.50, 'pending', '456 Elm St, LA'),
('Charlie', 'Tablet', '2025-08-05 11:25:00', 1, 300.00, 'cancelled', NULL),
('Diana', 'Monitor', '2025-08-07 15:40:00', 3, 199.99, 'shipped', '789 Pine St, Chicago'),
('Ethan', 'Keyboard', '2025-08-03 08:20:00', 5, 49.99, 'processing', NULL),
('Fiona', 'Mouse', '2025-08-04 10:30:00', 4, 25.00, 'shipped', '321 Oak St, Houston');

LIKE
Write a query to find all customers whose names end with 'a'.

select customer_name from orders where  customer_name like '%a';
+---------------+
| customer_name |
+---------------+
| Diana         |
| Fiona         |
+---------------+


Write a query to find orders where the product name contains the word 'Phone'.

FROM orders
    -> WHERE product_name LIKE '%Phone%';
+----------+---------------+--------------+---------------------+----------+--------+---------+------------------+
| order_id | customer_name | product_name | order_date          | quantity | price  | status  | shipping_address |
+----------+---------------+--------------+---------------------+----------+--------+---------+------------------+
|        2 | Bob           | Phone        | 2025-08-06 14:10:00 |        2 | 650.50 | pending | 456 Elm St, LA   |
+----------+---------------+--------------+---------------------+----------+--------+---------+------------------+

Write a query to find orders where the product name is exactly 5 characters long.

SELECT * FROM orders
    -> WHERE LENGTH(product_name) = 5;
+----------+---------------+--------------+---------------------+----------+--------+---------+---------------------+
| order_id | customer_name | product_name | order_date          | quantity | price  | status  | shipping_address    |
+----------+---------------+--------------+---------------------+----------+--------+---------+---------------------+
|        2 | Bob           | Phone        | 2025-08-06 14:10:00 |        2 | 650.50 | pending | 456 Elm St, LA      |
|        6 | Fiona         | Mouse        | 2025-08-04 10:30:00 |        4 |  25.00 | shipped | 321 Oak St, Houston |
+----------+---------------+--------------+---------------------+----------+--------+---------+---------------------+

 AS (Alias)
Write a query to show customer name as Buyer and price as Unit_Price.

SELECT customer_name AS Buyer, price AS Unit_Price
    -> FROM orders;
+---------+------------+
| Buyer   | Unit_Price |
+---------+------------+
| Alice   |    1200.00 |
| Bob     |     650.50 |
| Charlie |     300.00 |
| Diana   |     199.99 |
| Ethan   |      49.99 |
| Fiona   |      25.00 |
+---------+------------+

Write a query to show order ID and total amount (quantity × price) as Total_Cost.

 SELECT order_id, (quantity * price) AS Total_Cost
    -> FROM orders;
+----------+------------+
| order_id | Total_Cost |
+----------+------------+
|        1 |    1200.00 |
|        2 |    1301.00 |
|        3 |     300.00 |
|        4 |     599.97 |
|        5 |     249.95 |
|        6 |     100.00 |
+----------+------------+
       NOT
Write a query to find all orders not placed by 'Bob'.

SELECT * FROM orders
    -> WHERE customer_name != 'Bob';
+----------+---------------+--------------+---------------------+----------+---------+------------+-----------------------+
| order_id | customer_name | product_name | order_date          | quantity | price   | status     | shipping_address      |
+----------+---------------+--------------+---------------------+----------+---------+------------+-----------------------+
|        1 | Alice         | Laptop       | 2025-08-07 09:00:00 |        1 | 1200.00 | shipped    | 123 Main St, New York |
|        3 | Charlie       | Tablet       | 2025-08-05 11:25:00 |        1 |  300.00 | cancelled  | NULL                  |
|        4 | Diana         | Monitor      | 2025-08-07 15:40:00 |        3 |  199.99 | shipped    | 789 Pine St, Chicago  |
|        5 | Ethan         | Keyboard     | 2025-08-03 08:20:00 |        5 |   49.99 | processing | NULL                  |
|        6 | Fiona         | Mouse        | 2025-08-04 10:30:00 |        4 |   25.00 | shipped    | 321 Oak St, Houston   |
+----------+---------------+--------------+---------------------+----------+---------+------------+-----------------------+

Write a query to find orders where status is not 'shipped'.

SELECT * FROM orders
    -> WHERE status != 'shipped';
+----------+---------------+--------------+---------------------+----------+--------+------------+------------------+
| order_id | customer_name | product_name | order_date          | quantity | price  | status     | shipping_address |
+----------+---------------+--------------+---------------------+----------+--------+------------+------------------+
|        2 | Bob           | Phone        | 2025-08-06 14:10:00 |        2 | 650.50 | pending    | 456 Elm St, LA   |
|        3 | Charlie       | Tablet       | 2025-08-05 11:25:00 |        1 | 300.00 | cancelled  | NULL             |
|        5 | Ethan         | Keyboard     | 2025-08-03 08:20:00 |        5 |  49.99 | processing | NULL             |
+----------+---------------+--------------+---------------------+----------+--------+------------+------------------+


AND
Write a query to find orders with quantity greater than 2 and price less than 500.

SELECT * FROM orders
    -> WHERE quantity > 2 AND price < 500;
+----------+---------------+--------------+---------------------+----------+--------+------------+----------------------+
| order_id | customer_name | product_name | order_date          | quantity | price  | status     | shipping_address     |
+----------+---------------+--------------+---------------------+----------+--------+------------+----------------------+
|        4 | Diana         | Monitor      | 2025-08-07 15:40:00 |        3 | 199.99 | shipped    | 789 Pine St, Chicago |
|        5 | Ethan         | Keyboard     | 2025-08-03 08:20:00 |        5 |  49.99 | processing | NULL                 |
|        6 | Fiona         | Mouse        | 2025-08-04 10:30:00 |        4 |  25.00 | shipped    | 321 Oak St, Houston  |
+----------+---------------+--------------+---------------------+----------+--------+------------+----------------------+

Write a query to find orders placed by 'Alice' and status is 'shipped'.

SELECT * FROM orders
    -> WHERE customer_name = 'Alice' AND status = 'shipped';
+----------+---------------+--------------+---------------------+----------+---------+---------+-----------------------+
| order_id | customer_name | product_name | order_date          | quantity | price   | status  | shipping_address      |
+----------+---------------+--------------+---------------------+----------+---------+---------+-----------------------+
|        1 | Alice         | Laptop       | 2025-08-07 09:00:00 |        1 | 1200.00 | shipped | 123 Main St, New York |
+----------+---------------+--------------+---------------------+----------+---------+---------+-----------------------+


OR

Write a query to find orders where status is 'pending' or 'processing'.

SELECT * FROM orders
    -> WHERE status = 'pending' OR status = 'processing';
+----------+---------------+--------------+---------------------+----------+--------+------------+------------------+
| order_id | customer_name | product_name | order_date          | quantity | price  | status     | shipping_address |
+----------+---------------+--------------+---------------------+----------+--------+------------+------------------+
|        2 | Bob           | Phone        | 2025-08-06 14:10:00 |        2 | 650.50 | pending    | 456 Elm St, LA   |
|        5 | Ethan         | Keyboard     | 2025-08-03 08:20:00 |        5 |  49.99 | processing | NULL             |
+----------+---------------+--------------+---------------------+----------+--------+------------+------------------+

Write a query to find orders made by 'Alice' or 'Diana'.

SELECT * FROM orders
    -> WHERE customer_name IN ('Alice', 'Diana');
+----------+---------------+--------------+---------------------+----------+---------+---------+-----------------------+
| order_id | customer_name | product_name | order_date          | quantity | price   | status  | shipping_address      |
+----------+---------------+--------------+---------------------+----------+---------+---------+-----------------------+
|        1 | Alice         | Laptop       | 2025-08-07 09:00:00 |        1 | 1200.00 | shipped | 123 Main St, New York |
|        4 | Diana         | Monitor      | 2025-08-07 15:40:00 |        3 |  199.99 | shipped | 789 Pine St, Chicago  |
+----------+---------------+--------------+---------------------+----------+---------+---------+-----------------------+
IN

Write a query to find orders for products in the categories: 'Laptop', 'Phone', or 'Tablet'.

SELECT * FROM orders
    -> WHERE product_name IN ('Laptop', 'Phone', 'Tablet');
+----------+---------------+--------------+---------------------+----------+---------+-----------+-----------------------+
| order_id | customer_name | product_name | order_date          | quantity | price   | status    | shipping_address      |
+----------+---------------+--------------+---------------------+----------+---------+-----------+-----------------------+
|        1 | Alice         | Laptop       | 2025-08-07 09:00:00 |        1 | 1200.00 | shipped   | 123 Main St, New York |
|        2 | Bob           | Phone        | 2025-08-06 14:10:00 |        2 |  650.50 | pending   | 456 Elm St, LA        |
|        3 | Charlie       | Tablet       | 2025-08-05 11:25:00 |        1 |  300.00 | cancelled | NULL                  |
+----------+---------------+--------------+---------------------+----------+---------+-----------+-----------------------+

Write a query to find orders placed by customers in a given list: 'Alice', 'Bob', 'Charlie'.

SELECT * FROM orders
    -> WHERE customer_name IN ('Alice', 'Bob', 'Charlie');
+----------+---------------+--------------+---------------------+----------+---------+-----------+-----------------------+
| order_id | customer_name | product_name | order_date          | quantity | price   | status    | shipping_address      |
+----------+---------------+--------------+---------------------+----------+---------+-----------+-----------------------+
|        1 | Alice         | Laptop       | 2025-08-07 09:00:00 |        1 | 1200.00 | shipped   | 123 Main St, New York |
|        2 | Bob           | Phone        | 2025-08-06 14:10:00 |        2 |  650.50 | pending   | 456 Elm St, LA        |
|        3 | Charlie       | Tablet       | 2025-08-05 11:25:00 |        1 |  300.00 | cancelled | NULL                  |
+----------+---------------+--------------+---------------------+----------+---------+-----------+-----------------------+

IS NULL / IS NOT NULL

Write a query to find orders where the shipping address is missing.

SELECT * FROM orders
    -> WHERE shipping_address IS NULL;
+----------+---------------+--------------+---------------------+----------+--------+------------+------------------+
| order_id | customer_name | product_name | order_date          | quantity | price  | status     | shipping_address |
+----------+---------------+--------------+---------------------+----------+--------+------------+------------------+
|        3 | Charlie       | Tablet       | 2025-08-05 11:25:00 |        1 | 300.00 | cancelled  | NULL             |
|        5 | Ethan         | Keyboard     | 2025-08-03 08:20:00 |        5 |  49.99 | processing | NULL             |
+----------+---------------+--------------+---------------------+----------+--------+------------+------------------+

Write a query to find orders where the shipping address is provided.

SELECT * FROM orders
    -> WHERE shipping_address IS NOT NULL;
+----------+---------------+--------------+---------------------+----------+---------+---------+-----------------------+
| order_id | customer_name | product_name | order_date          | quantity | price   | status  | shipping_address      |
+----------+---------------+--------------+---------------------+----------+---------+---------+-----------------------+
|        1 | Alice         | Laptop       | 2025-08-07 09:00:00 |        1 | 1200.00 | shipped | 123 Main St, New York |
|        2 | Bob           | Phone        | 2025-08-06 14:10:00 |        2 |  650.50 | pending | 456 Elm St, LA        |
|        4 | Diana         | Monitor      | 2025-08-07 15:40:00 |        3 |  199.99 | shipped | 789 Pine St, Chicago  |
|        6 | Fiona         | Mouse        | 2025-08-04 10:30:00 |        4 |   25.00 | shipped | 321 Oak St, Houston   |
+----------+---------------+--------------+---------------------+----------+---------+---------+-----------------------+

FUNCTION-BASED
Write a query to find customers whose name is longer than 5 characters.

SELECT * FROM orders
    -> WHERE LENGTH(customer_name) > 5;
+----------+---------------+--------------+---------------------+----------+--------+-----------+------------------+
| order_id | customer_name | product_name | order_date          | quantity | price  | status    | shipping_address |
+----------+---------------+--------------+---------------------+----------+--------+-----------+------------------+
|        3 | Charlie       | Tablet       | 2025-08-05 11:25:00 |        1 | 300.00 | cancelled | NULL             |
+----------+---------------+--------------+---------------------+----------+--------+-----------+------------------+

Write a query to show all customer names in uppercase.

 SELECT UPPER(customer_name) AS customer_name_upper
    -> FROM orders;
+---------------------+
| customer_name_upper |
+---------------------+
| ALICE               |
| BOB                 |
| CHARLIE             |
| DIANA               |
| ETHAN               |
| FIONA               |
+---------------------+

Write a query to find orders where the product name is all lowercase.

SELECT * FROM orders
    -> WHERE product_name = LOWER(product_name);
+----------+---------------+--------------+---------------------+----------+---------+------------+-----------------------+
| order_id | customer_name | product_name | order_date          | quantity | price   | status     | shipping_address      |
+----------+---------------+--------------+---------------------+----------+---------+------------+-----------------------+
|        1 | Alice         | Laptop       | 2025-08-07 09:00:00 |        1 | 1200.00 | shipped    | 123 Main St, New York |
|        2 | Bob           | Phone        | 2025-08-06 14:10:00 |        2 |  650.50 | pending    | 456 Elm St, LA        |
|        3 | Charlie       | Tablet       | 2025-08-05 11:25:00 |        1 |  300.00 | cancelled  | NULL                  |
|        4 | Diana         | Monitor      | 2025-08-07 15:40:00 |        3 |  199.99 | shipped    | 789 Pine St, Chicago  |
|        5 | Ethan         | Keyboard     | 2025-08-03 08:20:00 |        5 |   49.99 | processing | NULL                  |
|        6 | Fiona         | Mouse        | 2025-08-04 10:30:00 |        4 |   25.00 | shipped    | 321 Oak St, Houston   |
+----------+---------------+--------------+---------------------+----------+---------+------------+-----------------------+

Write a query to return the first 3 letters of each product name with an alias Short_Name.

SELECT SUBSTRING(product_name, 1, 3) AS Short_Name
    -> FROM orders;
+------------+
| Short_Name |
+------------+
| Lap        |
| Pho        |
| Tab        |
| Mon        |
| Key        |
| Mou        |
+------------+

